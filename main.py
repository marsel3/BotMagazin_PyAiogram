import os
import sqlite3
import urllib.request

from telebot import types
import telebot

tovar_id = ''
delFlag = False


def all_tovar_id():  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ id
    category = types.InlineKeyboardMarkup(row_width=1)

    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()
    cursor.execute('SELECT tovar_id FROM tovars')
    results = cursor.fetchall()
    conn.close()

    return [str(i[0]) for i in results]




def main():
    TOKEN = "1672438859:AAFjoueNYWY2ZwUM1UqNIBC_USPJ2N4hE48"
    bot = telebot.TeleBot(TOKEN)
    all_tov_id = all_tovar_id()



    def categories():    # –í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã category —Ç–µ–∫—Å—Ç=–Ω–∞–∑–≤–∞–Ω–∏–µ
        conn = sqlite3.connect('db/date_base.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM category')
        results = cursor.fetchall()
        conn.close()

        markup = types.InlineKeyboardMarkup(row_width=1)
        btns = [types.InlineKeyboardButton(text=f'{i[1]}', callback_data=f'{i[0]}') for i in results]
        markup.add(*btns)

        return markup



    def category_list():    #–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ
        conn = sqlite3.connect('db/date_base.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM category')
        results = cursor.fetchall()
        conn.close()

        return [i[0] for i in results]



    def tov_in_category(category): #–í—ã–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        conn = sqlite3.connect('db/date_base.db')
        cursor = conn.cursor()
        cursor.execute(f'SELECT tovar_id, name_tov, price_tov FROM tovars WHERE cat_id="{category}"')
        results = cursor.fetchall()
        conn.close()

        markup = types.InlineKeyboardMarkup(row_width=1)
        btns = [types.InlineKeyboardButton(text=f'{i[1]} \t{i[2]} —Ä—É–±–ª–µ–π', callback_data=f'{i[0]}') for i in results]
        markup.add(*btns, types.InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'back_to_cat'))
        return markup



    def card_info(id):  # –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ—É –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
        conn = sqlite3.connect('db/date_base.db')
        cursor = conn.cursor()
        cursor.execute(f'SELECT name_tov, price_tov, disc_tov, photo_tov FROM tovars WHERE tovar_id="{id}"')
        results = cursor.fetchall()[0]

        if len(results) == 4:
            markup = types.InlineKeyboardMarkup(row_width=1)
            btns = [types.InlineKeyboardButton(text=f'–ö—É–ø–∏—Ç—å', callback_data=f'add_to_basket'),
                    types.InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'back_to_cat')]
            markup.add(*btns)
            string = ''
            try:
                # img = open(f"images/{results[3]}", "rb").close()
                urllib.request.urlretrieve(f"{results[3]}", "images/photo.png")
                img = open('images/photo.png', 'rb')
            except:
                print(f"–§–æ—Ç–æ {results[0]} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
                img = open('images/error.jpg', 'rb')
                string = '–°–æ–æ—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ!\n\n\n'

            string += f'{results[0]}\n\n–¶–µ–Ω–∞: {results[1]} —Ä—É–±–ª–µ–π\n{results[2]}'

            return string, img, markup



    def search_in_basket(user, string): # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —é–∑–µ—Ä –∏–ª–∏ –≤—ã–≤–æ–¥ –ø–æ –¥–∞–Ω–Ω—ã–º
        conn = sqlite3.connect('db/users.db')
        cursor = conn.cursor()
        cursor.execute(f"""CREATE TABLE IF NOT EXISTS "{user}"(tov_id text, name_tov text, price_tov text)""")

        cursor.execute(f'SELECT * FROM "{user}"')
        results = cursor.fetchall()
        conn.close()

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text=f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'arrange'),
                   types.InlineKeyboardButton(text=f'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'edit_basket'))

        summ = 0
        count = 1
        if len(results) > 0:
            for i in results:
                string += f"\n{count}. {i[1]} \t{i[2]} —Ä—É–±–ª–µ–π"
                summ += int(i[2])
                count += 1
            string += '\n________________' + '_' * len(str(summ))
        string += f'\n–ò—Ç–æ–≥–æ: {summ} —Ä—É–±–ª–µ–π'


        return string, markup



    def add_to_basket(user, tov_id): #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î —é–∑–µ—Ä–∞
        conn = sqlite3.connect('db/date_base.db')
        cursor = conn.cursor()
        cursor.execute(f'SELECT tovar_id, name_tov, price_tov FROM tovars WHERE tovar_id="{tov_id}"')
        results = cursor.fetchall()[0]
        conn.close()

        conn = sqlite3.connect('db/users.db')
        cursor = conn.cursor()
        cursor.execute(f'INSERT INTO "{user}" VALUES ("{results[0]}", "{results[1]}", "{results[2]}")')
        conn.commit()
        conn.close()


    def basket_inputs(user):
        conn = sqlite3.connect('db/users.db')
        cursor = conn.cursor()
        cursor.execute(f'SELECT tov_id, name_tov, price_tov FROM "{user}"')
        results = cursor.fetchall()
        conn.close()

        markup = types.InlineKeyboardMarkup(row_width=1)
        btns = [types.InlineKeyboardButton(text=f'{i[1]}', callback_data=f'{i[0]}') for i in results]
        markup.add(*btns)

        return markup


    def edit_basket(user, tov_id):
        conn = sqlite3.connect('db/users.db')
        cursor = conn.cursor()
        cursor.execute(f'DELETE from "{user}" where tov_id = "{tov_id}"')
        conn.commit()
        conn.close()




    @bot.message_handler(commands=['start'])  # /start –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞
    def start_message(message):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

        btns = [types.KeyboardButton('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞'),
                types.KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑  ‚û°'),
                types.KeyboardButton('üí¨ –ü–æ–º–æ—â—å')]

        markup.add(*btns)
        bot.send_message(message.chat.id,
                         message.from_user.first_name + ', –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!',
                         reply_markup=markup)
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"',
                         reply_markup=markup)



    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):

        if message.text == "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" or message.text.lower() == "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=categories())

        if message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞" or message.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞":
            user_id = message.from_user.id
            text, markup = search_in_basket(user_id, '–ö–æ—Ä–∑–∏–Ω–∞:\n')
            bot.send_message(message.chat.id, text, reply_markup=markup)


        if message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑  ‚û°" or message.text.lower() == "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
            pass

        if message.text == "üí¨ –ü–æ–º–æ—â—å" or message.text.lower() == "–ø–æ–º–æ—â—å":
            bot.send_message(message.chat.id, '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ telegram-–±–æ—Ç–∞ '
                                              '–æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º:\nTelegram: @insaf'
                                              '\n–ü–æ—á—Ç–∞: insaf@gmail.com \n–¢–µ–ª–µ—Ñ–æ–Ω: 2-31-54')



    @bot.callback_query_handler(func=lambda call: True)
    def handler_call(call):
        global tovar_id, delFlag

        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.message.chat.id

        if call.data == 'back_to_cat':
            bot.delete_message(chat_id, message_id)
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=categories())

        if call.data in category_list():
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä',
                reply_markup=tov_in_category(call.data))


        if call.data in all_tov_id:
            if delFlag:
                delFlag = False
                edit_basket(user_id, call.data)

                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(types.InlineKeyboardButton(text=f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'arrange'),
                           types.InlineKeyboardButton(text=f'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'edit_basket'))

                bot.delete_message(chat_id, message_id)
                bot.send_message(chat_id, search_in_basket(user_id, '–ö–æ—Ä–∑–∏–Ω–∞:\n')[0],
                                 reply_markup=markup)
            else:
                string, img, markup = card_info(call.data)
                tovar_id = call.data

                bot.delete_message(chat_id, message_id)
                bot.send_photo(chat_id, photo=img, caption=string, reply_markup=markup)
                img.close()
                try:
                    os.remove('images/photo.png')
                except:
                    print('–§–æ—Ç–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ!')


        if call.data == 'add_to_basket':
            bot.delete_message(chat_id, message_id)
            add_to_basket(user_id, tovar_id)
            print('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
            bot.send_message(chat_id, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

        if call.data == 'arrange':  # –û—Ñ—Ç–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            bot.delete_message(chat_id, message_id)
            bot.send_message(chat_id, '–ù–∞—Ö—É–π –∏–¥–∏! –ù–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è)')


        if call.data == 'edit_basket':
            delFlag = True
            bot.delete_message(chat_id, message_id)
            bot.send_message(chat_id, search_in_basket(user_id, '–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?\n')[0],
                             reply_markup=basket_inputs(user_id))


    bot.polling(none_stop=True)


main()