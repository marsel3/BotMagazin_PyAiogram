import os
import sqlite3
import urllib.request

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton


def all_tovar_id():     # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ id
    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()
    cursor.execute('SELECT tovar_id FROM tovars')
    results = cursor.fetchall()
    conn.close()

    return [str(i[0]) for i in results]


bot = Bot(token="1672438859:AAFjoueNYWY2ZwUM1UqNIBC_USPJ2N4hE48")
dp = Dispatcher(bot)

number = 1
tovar_id = ''   # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
delFlag = False
all_tov_id = all_tovar_id()     # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ id


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btns = [KeyboardButton('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'),
            KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞'),
            KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑  ‚û°'),
            KeyboardButton('üí¨ –ü–æ–º–æ—â—å')]
    markup.add(*btns)

    await message.answer(str(message.from_user.first_name) + ', –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!')
    await message.answer('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"', reply_markup=markup)


@dp.message_handler()
async def echo_message(message: types.Message):
    global number

    if message.text == "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" or message.text.lower() == "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        number = 1
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:\n', reply_markup=category())

    if message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞" or message.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞":
        user_id = message.from_user.id
        text, markup = search_in_basket(user_id, '–ö–æ—Ä–∑–∏–Ω–∞:\n')
        await bot.send_message(message.chat.id, text, reply_markup=markup)

    if message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑  ‚û°" or message.text.lower() == "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        inline_kb_full = InlineKeyboardMarkup(row_width=3)
        btns = [InlineKeyboardButton('‚ûñ', callback_data='minus'),
                InlineKeyboardButton(f'{number}', callback_data='call_number'),
                InlineKeyboardButton('‚ûï', callback_data='plus')]
        inline_kb_full.add(*btns)
        await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=inline_kb_full)

    if message.text == "üí¨ –ü–æ–º–æ—â—å" or message.text.lower() == "–ø–æ–º–æ—â—å":
        await bot.send_message(message.chat.id, '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ telegram-–±–æ—Ç–∞ '
                                          '–æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º:\nTelegram: @insaf'
                                          '\n–ü–æ—á—Ç–∞: insaf@gmail.com \n–¢–µ–ª–µ—Ñ–æ–Ω: 2-31-54')




@dp.callback_query_handler(lambda c: c.data and c.data.startswith('edit_'))
async def process_callback_kb1btn1(call: types.CallbackQuery):
    global number, tovar_id

    code = call.data[5:]

    tovar_id = code
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.message.chat.id

    conn = sqlite3.connect('db/users.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT count_tov FROM "{user_id}" WHERE tov_id="{code}"')
    results = cursor.fetchall()
    conn.close()

    number = int(results[0][0])

    markup = types.InlineKeyboardMarkup()
    btns = [InlineKeyboardButton(text=f'‚ûñ', callback_data=f'minus'),
            InlineKeyboardButton(text=f'{number}', callback_data=f'call_number'),
            InlineKeyboardButton(text=f'‚ûï', callback_data=f'plus')]

    markup.add(*btns)
    markup.add(InlineKeyboardButton(text=f'‚úî', callback_data=f'confirm'))
    markup.add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å', callback_data=f'del_cat_basket'))

    string = card_info(code)[0]

    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id, string, reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data)
# async def answer(call: types.CallbackQuery, message: types.Message):
async def answer(call: types.CallbackQuery):
    global number, delFlag, tovar_id

    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.message.chat.id

    if call.data == 'back_to_cat':
        await bot.delete_message(chat_id, message_id)
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',  reply_markup=category())

    if call.data in category_list():
        number = 1
        await bot.edit_message_reply_markup(chat_id, message_id,
                                            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä',
                                            reply_markup=tov_in_category(call.data))

    if call.data in all_tov_id:
        if delFlag:
            delFlag = False
            del_cat_basket(user_id, call.data)

            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(text=f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'arrange'),
                       types.InlineKeyboardButton(text=f'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'edit_basket'))

            await bot.edit_message_text(chat_id, message_id,
                                        search_in_basket(user_id, '–ö–æ—Ä–∑–∏–Ω–∞:\n')[0],
                                        reply_markup=markup)
        else:
            string, img, markup = card_info(call.data)
            tovar_id = call.data

            await bot.delete_message(chat_id, message_id)
            await bot.send_photo(chat_id, photo=img, caption=string, reply_markup=markup)

            img.close()
            try:
                os.remove('images/photo.png')
            except:
                print('–§–æ—Ç–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ!')

    if call.data == 'add_to_basket':
        add_to_basket(user_id, tovar_id, number)
        await bot.delete_message(chat_id, message_id)
        await bot.send_message(chat_id, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—â—ë?', reply_markup=category())
        number = 1
        print('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

    if call.data == 'arrange':  # –û—Ñ—Ç–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        await bot.edit_message_text(chat_id, message_id,
                                    '–ù–∞—Ö—É–π –∏–¥–∏! –ù–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è)')

    if call.data == 'minus':
        if number > 0:
            number -= 1
            call.message.reply_markup.inline_keyboard[0][1].text = number
            await bot.edit_message_reply_markup(chat_id, message_id, reply_markup=call.message.reply_markup)

    if call.data == 'plus':
        number += 1
        call.message.reply_markup.inline_keyboard[0][1].text = number
        await bot.edit_message_reply_markup(chat_id, message_id, reply_markup=call.message.reply_markup)

    if call.data == 'confirm':
        edit_confirm(user_id, number, tovar_id)

        text, markup = search_in_basket(user_id, '–ö–æ—Ä–∑–∏–Ω–∞:\n')
        await bot.send_message(chat_id, text, reply_markup=markup)

    if call.data == 'del_cat_basket':
        del_cat_basket(user_id, tovar_id)
        text, markup = search_in_basket(user_id, '–ö–æ—Ä–∑–∏–Ω–∞:\n')
        await bot.send_message(chat_id, text, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏–∏


def category():     # –í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã category —Ç–µ–∫—Å—Ç=–Ω–∞–∑–≤–∞–Ω–∏–µ
    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM category')
    results = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup(row_width=1)
    btns = [InlineKeyboardButton(text=f'{i[1]}', callback_data=f'{i[0]}') for i in results]
    markup.add(*btns)

    return markup


def category_list():  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM category')
    results = cursor.fetchall()
    conn.close()
    return [i[0] for i in results]


def tov_in_category(category):  # –í—ã–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT tovar_id, name_tov, price_tov FROM tovars WHERE cat_id="{category}"')
    results = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup(row_width=1)
    btns = [InlineKeyboardButton(text=f'{i[1]} \t{i[2]} —Ä—É–±–ª–µ–π', callback_data=f'{i[0]}') for i in results]
    markup.add(*btns, InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'back_to_cat'))
    return markup


def card_info(id):  # –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ—É –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
    global number
    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT name_tov, price_tov, disc_tov, photo_tov FROM tovars WHERE tovar_id="{id}"')

    results = cursor.fetchall()[0]

    if len(results) > 0:
        markup = types.InlineKeyboardMarkup()
        btns = [InlineKeyboardButton(text=f'‚ûñ', callback_data=f'minus'),
                InlineKeyboardButton(text=f'{number}', callback_data=f'call_number'),
                InlineKeyboardButton(text=f'‚ûï', callback_data=f'plus')]
        markup.add(*btns)
        markup.add(InlineKeyboardButton(text=f'–ö—É–ø–∏—Ç—å', callback_data=f'add_to_basket'))
        markup.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'back_to_cat'))

        string = ''
        try:
            urllib.request.urlretrieve(f"{results[3]}", "images/photo.png")
            img = open('images/photo.png', 'rb')

        except:
            print(f"–§–æ—Ç–æ {results[0]} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            img = open('images/error.jpg', 'rb')
            string = '–°–æ–æ—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ!\n\n\n'

        string += f'{results[0]}\n\n–¶–µ–Ω–∞: {results[1]} —Ä—É–±–ª–µ–π\n{results[2]}'

        return string, img, markup


def create_user_bd(user):   # C–æ–∑–¥–∞—ë—Ç –ë–î —Å id —é–∑–µ—Ä–∞, –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    conn = sqlite3.connect('db/users.db')
    cursor = conn.cursor()
    cursor.execute(f'CREATE TABLE IF NOT EXISTS "{user}" (tov_id text, name_tov text, price_tov text, count_tov text)')


def search_in_basket(user, string):     # –í—ã–≤–æ–¥–∏—Ç –∫–æ—Ä–∑–∏–Ω—É
    create_user_bd(user)

    conn = sqlite3.connect('db/users.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM "{user}"')
    results = cursor.fetchall()
    conn.close()
    markup = types.InlineKeyboardMarkup(resize_button=True)
    for i in results:
        btns = [InlineKeyboardButton(text=f'{i[1]}', callback_data=f'{i[0]}'),
                InlineKeyboardButton(text=f'{i[3]} —à—Ç.', callback_data=f'edit_{i[0]}'),
                InlineKeyboardButton(text=f'‚úè', callback_data=f'edit_{i[0]}')]
        markup.add(*btns)

    markup.add(InlineKeyboardButton(text=f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'arrange'))

    summ = 0
    count = 1
    if len(results) > 0:
        for i in results:
            string += f"\n{count}.  {i[1]} \n{i[2]} *{i[3]}  =  {int(i[2]) * int(i[3])} —Ä—É–±–ª–µ–π"
            summ += (int(i[2]) * int(i[3]))
            count += 1
        string += '\n________________' + '_' * len(str(summ))
    string += f'\n–ò—Ç–æ–≥–æ: {summ} —Ä—É–±–ª–µ–π'

    return string, markup


def add_to_basket(user, tov_id, count):  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤ –ë–î —é–∑–µ—Ä–∞ —Ç–æ–≤–∞—Ä—ã
    create_user_bd(user)

    conn = sqlite3.connect('db/date_base.db')
    cursor = conn.cursor()

    cursor.execute(f'SELECT tovar_id, name_tov, price_tov FROM tovars WHERE tovar_id="{tov_id}"')
    results = cursor.fetchall()[0]
    conn.close()

    conn = sqlite3.connect('db/users.db')
    cursor = conn.cursor()

    cursor.execute(f'SELECT count_tov FROM "{user}" WHERE tov_id="{tov_id}"')
    results_2 = cursor.fetchall()
    if len(results_2) > 0:
        count = str(int(count) + int(results_2[0][0]))
        cursor.execute(f'DELETE FROM "{user}" where tov_id="{tov_id}"')
    cursor.execute(f'INSERT INTO "{user}" VALUES ("{results[0]}", "{results[1]}", "{results[2]}", {count})')
    conn.commit()
    conn.close()


def del_cat_basket(user, tov_id):   # –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ id
    conn = sqlite3.connect('db/users.db')
    cursor = conn.cursor()
    cursor.execute(f'DELETE FROM "{user}" WHERE tov_id="{tov_id}"')
    conn.commit()
    conn.close()


def edit_confirm(user, number, tov_id):  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if number == 0:
        del_cat_basket(user, tov_id)
    else:
        conn = sqlite3.connect('db/users.db')
        cursor = conn.cursor()
        cursor.execute(f'UPDATE "{user}" SET count_tov="{number}" WHERE tov_id="{tov_id}"')
        conn.commit()
        conn.close()


if __name__ == '__main__':
    executor.start_polling(dp)